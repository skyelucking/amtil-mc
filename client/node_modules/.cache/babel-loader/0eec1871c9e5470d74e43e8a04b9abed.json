{"ast":null,"code":"import isPlainObject from \"./isPlainObject\";\nexport var isMergeObj = function (obj) {\n  return isPlainObject(obj) || Array.isArray(obj);\n};\n\nvar getKeys = function (obj, options) {\n  var keys = Object.keys(obj);\n  return options.withSymbols ? keys.concat(Object.getOwnPropertySymbols(obj)) : keys;\n};\n\nvar getMerge = function () {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  var merge = function (target) {\n    for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      sources[_key - 1] = arguments[_key];\n    }\n\n    if (target && sources.length) {\n      sources.forEach(function (source) {\n        if (source) {\n          getKeys(source, options).forEach(function (key) {\n            var prop = source[key];\n\n            if (!options.predicate || options.predicate(key, prop)) {\n              if (typeof prop !== \"undefined\" || options.undefinedOverwrites) {\n                //object/array - go deeper\n                if (isMergeObj(prop)) {\n                  if (typeof target[key] === \"undefined\" || !isPlainObject(target[key])) {\n                    //recreate target prop if doesnt exist or not an object\n                    target[key] = Array.isArray(prop) ? [] : {};\n                  }\n\n                  merge(target[key], prop);\n                } else {\n                  target[key] = prop;\n                }\n              }\n            }\n          });\n        }\n      });\n    }\n\n    return target;\n  };\n\n  return merge;\n};\n/**\n * Does deep merge of simple objects and arrays (only)\n *\n * The first parameter is the target\n * Will only merge objects passed as arguments to this method\n * Any property in a later object will simply override the one in a previous one\n * Undefined properties from sources will be ignored\n *\n * No recursion protection\n */\n\n\nexport default getMerge();\nexport { getMerge };","map":{"version":3,"sources":["C:/Users/lucki/Desktop/ClassCodeProjects/amtil-mc/node_modules/@rpldy/shared/lib/esm/utils/merge.js"],"names":["isPlainObject","isMergeObj","obj","Array","isArray","getKeys","options","keys","Object","withSymbols","concat","getOwnPropertySymbols","getMerge","arguments","length","undefined","merge","target","_len","sources","_key","forEach","source","key","prop","predicate","undefinedOverwrites"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,iBAA1B;AACA,OAAO,IAAIC,UAAU,GAAG,UAAUC,GAAV,EAAe;AACrC,SAAOF,aAAa,CAACE,GAAD,CAAb,IAAsBC,KAAK,CAACC,OAAN,CAAcF,GAAd,CAA7B;AACD,CAFM;;AAIP,IAAIG,OAAO,GAAG,UAAUH,GAAV,EAAeI,OAAf,EAAwB;AACpC,MAAIC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYL,GAAZ,CAAX;AACA,SAAOI,OAAO,CAACG,WAAR,GAAsBF,IAAI,CAACG,MAAL,CAAYF,MAAM,CAACG,qBAAP,CAA6BT,GAA7B,CAAZ,CAAtB,GAAuEK,IAA9E;AACD,CAHD;;AAKA,IAAIK,QAAQ,GAAG,YAAY;AACzB,MAAIN,OAAO,GAAGO,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAAlF;;AAEA,MAAIG,KAAK,GAAG,UAAUC,MAAV,EAAkB;AAC5B,SAAK,IAAIC,IAAI,GAAGL,SAAS,CAACC,MAArB,EAA6BK,OAAO,GAAG,IAAIhB,KAAJ,CAAUe,IAAI,GAAG,CAAP,GAAWA,IAAI,GAAG,CAAlB,GAAsB,CAAhC,CAAvC,EAA2EE,IAAI,GAAG,CAAvF,EAA0FA,IAAI,GAAGF,IAAjG,EAAuGE,IAAI,EAA3G,EAA+G;AAC7GD,MAAAA,OAAO,CAACC,IAAI,GAAG,CAAR,CAAP,GAAoBP,SAAS,CAACO,IAAD,CAA7B;AACD;;AAED,QAAIH,MAAM,IAAIE,OAAO,CAACL,MAAtB,EAA8B;AAC5BK,MAAAA,OAAO,CAACE,OAAR,CAAgB,UAAUC,MAAV,EAAkB;AAChC,YAAIA,MAAJ,EAAY;AACVjB,UAAAA,OAAO,CAACiB,MAAD,EAAShB,OAAT,CAAP,CAAyBe,OAAzB,CAAiC,UAAUE,GAAV,EAAe;AAC9C,gBAAIC,IAAI,GAAGF,MAAM,CAACC,GAAD,CAAjB;;AAEA,gBAAI,CAACjB,OAAO,CAACmB,SAAT,IAAsBnB,OAAO,CAACmB,SAAR,CAAkBF,GAAlB,EAAuBC,IAAvB,CAA1B,EAAwD;AACtD,kBAAI,OAAOA,IAAP,KAAgB,WAAhB,IAA+BlB,OAAO,CAACoB,mBAA3C,EAAgE;AAC9D;AACA,oBAAIzB,UAAU,CAACuB,IAAD,CAAd,EAAsB;AACpB,sBAAI,OAAOP,MAAM,CAACM,GAAD,CAAb,KAAuB,WAAvB,IAAsC,CAACvB,aAAa,CAACiB,MAAM,CAACM,GAAD,CAAP,CAAxD,EAAuE;AACrE;AACAN,oBAAAA,MAAM,CAACM,GAAD,CAAN,GAAcpB,KAAK,CAACC,OAAN,CAAcoB,IAAd,IAAsB,EAAtB,GAA2B,EAAzC;AACD;;AAEDR,kBAAAA,KAAK,CAACC,MAAM,CAACM,GAAD,CAAP,EAAcC,IAAd,CAAL;AACD,iBAPD,MAOO;AACLP,kBAAAA,MAAM,CAACM,GAAD,CAAN,GAAcC,IAAd;AACD;AACF;AACF;AACF,WAlBD;AAmBD;AACF,OAtBD;AAuBD;;AAED,WAAOP,MAAP;AACD,GAhCD;;AAkCA,SAAOD,KAAP;AACD,CAtCD;AAuCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,eAAeJ,QAAQ,EAAvB;AACA,SAASA,QAAT","sourcesContent":["import isPlainObject from \"./isPlainObject\";\nexport var isMergeObj = function (obj) {\n  return isPlainObject(obj) || Array.isArray(obj);\n};\n\nvar getKeys = function (obj, options) {\n  var keys = Object.keys(obj);\n  return options.withSymbols ? keys.concat(Object.getOwnPropertySymbols(obj)) : keys;\n};\n\nvar getMerge = function () {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  var merge = function (target) {\n    for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      sources[_key - 1] = arguments[_key];\n    }\n\n    if (target && sources.length) {\n      sources.forEach(function (source) {\n        if (source) {\n          getKeys(source, options).forEach(function (key) {\n            var prop = source[key];\n\n            if (!options.predicate || options.predicate(key, prop)) {\n              if (typeof prop !== \"undefined\" || options.undefinedOverwrites) {\n                //object/array - go deeper\n                if (isMergeObj(prop)) {\n                  if (typeof target[key] === \"undefined\" || !isPlainObject(target[key])) {\n                    //recreate target prop if doesnt exist or not an object\n                    target[key] = Array.isArray(prop) ? [] : {};\n                  }\n\n                  merge(target[key], prop);\n                } else {\n                  target[key] = prop;\n                }\n              }\n            }\n          });\n        }\n      });\n    }\n\n    return target;\n  };\n\n  return merge;\n};\n/**\n * Does deep merge of simple objects and arrays (only)\n *\n * The first parameter is the target\n * Will only merge objects passed as arguments to this method\n * Any property in a later object will simply override the one in a previous one\n * Undefined properties from sources will be ignored\n *\n * No recursion protection\n */\n\n\nexport default getMerge();\nexport { getMerge };"]},"metadata":{},"sourceType":"module"}