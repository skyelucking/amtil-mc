{"ast":null,"code":"function _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nimport { logger, hasWindow, isFunction } from \"@rpldy/shared\";\nimport createState from \"@rpldy/simple-state\";\nimport { SENDER_EVENTS, UPLOADER_EVENTS } from \"../consts\";\nimport processQueueNext from \"./processQueueNext\";\nimport * as abortMethods from \"./abort\";\nimport { detachRecycledFromPreviousBatch, getBatchFromState, preparePendingForUpload, removePendingBatches } from \"./batchHelpers\";\n\nvar createUploaderQueue = function (options, trigger, cancellable, sender, uploaderId) {\n  var _createState = createState({\n    itemQueue: [],\n    currentBatch: null,\n    batches: {},\n    items: {},\n    activeIds: [],\n    aborts: {}\n  }),\n      state = _createState.state,\n      update = _createState.update;\n\n  var getState = function () {\n    return state;\n  };\n\n  var updateState = function (updater) {\n    update(updater);\n  };\n\n  var add = function (item) {\n    if (state.items[item.id] && !item.recycled) {\n      throw new Error(\"Uploader queue conflict - item \".concat(item.id, \" already exists\"));\n    }\n\n    if (item.recycled) {\n      detachRecycledFromPreviousBatch(queueState, item);\n    }\n\n    updateState(function (state) {\n      state.items[item.id] = item;\n      state.itemQueue.push(item.id);\n    });\n  };\n\n  var handleItemProgress = function (item, completed, loaded) {\n    if (state.items[item.id]) {\n      updateState(function (state) {\n        var stateItem = state.items[item.id];\n        stateItem.loaded = loaded;\n        stateItem.completed = completed;\n      }); //trigger item progress event for the outside\n\n      trigger(UPLOADER_EVENTS.ITEM_PROGRESS, getState().items[item.id]);\n    }\n  };\n\n  sender.on(SENDER_EVENTS.ITEM_PROGRESS, handleItemProgress);\n  sender.on(SENDER_EVENTS.BATCH_PROGRESS, function (batch) {\n    var _state$batches$batch$;\n\n    var batchItems = (_state$batches$batch$ = state.batches[batch.id]) === null || _state$batches$batch$ === void 0 ? void 0 : _state$batches$batch$.batch.items;\n\n    if (batchItems) {\n      var _batchItems$reduce = batchItems.reduce(function (res, item) {\n        res[0] += item.completed;\n        res[1] += item.loaded;\n        return res;\n      }, [0, 0]),\n          _batchItems$reduce2 = _slicedToArray(_batchItems$reduce, 2),\n          completed = _batchItems$reduce2[0],\n          loaded = _batchItems$reduce2[1];\n\n      updateState(function (state) {\n        var stateBatch = state.batches[batch.id].batch; //average of completed percentage for batch items\n\n        stateBatch.completed = completed / batchItems.length; //sum of loaded bytes for batch items\n\n        stateBatch.loaded = loaded;\n      });\n      trigger(UPLOADER_EVENTS.BATCH_PROGRESS, state.batches[batch.id].batch);\n    }\n  });\n  var queueState = {\n    uploaderId: uploaderId,\n    getOptions: function getOptions() {\n      return options;\n    },\n    getCurrentActiveCount: function getCurrentActiveCount() {\n      return state.activeIds.length;\n    },\n    getState: getState,\n    updateState: updateState,\n    trigger: trigger,\n    runCancellable: function runCancellable(name) {\n      if (!isFunction(cancellable)) {\n        //for flow :(\n        throw new Error(\"cancellable is of wrong type\");\n      }\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      return cancellable.apply(void 0, [name].concat(args));\n    },\n    sender: sender,\n    handleItemProgress: handleItemProgress\n  };\n\n  if (hasWindow() && logger.isDebugOn()) {\n    window[\"__rpldy_\".concat(uploaderId, \"_queue_state\")] = queueState;\n  }\n\n  return {\n    updateState: updateState,\n    getState: queueState.getState,\n    runCancellable: queueState.runCancellable,\n    uploadBatch: function uploadBatch(batch, batchOptions) {\n      if (batchOptions) {\n        updateState(function (state) {\n          state.batches[batch.id].batchOptions = batchOptions;\n        });\n      }\n\n      processQueueNext(queueState);\n    },\n    addBatch: function addBatch(batch, batchOptions) {\n      updateState(function (state) {\n        state.batches[batch.id] = {\n          batch: batch,\n          batchOptions: batchOptions,\n          finishedCounter: 0\n        };\n      });\n      batch.items.forEach(add);\n      return getBatchFromState(state, batch.id);\n    },\n    abortItem: function abortItem(id) {\n      return abortMethods.abortItem(queueState, id, processQueueNext);\n    },\n    abortBatch: function abortBatch(id) {\n      abortMethods.abortBatch(queueState, id, processQueueNext);\n    },\n    abortAll: function abortAll() {\n      abortMethods.abortAll(queueState, processQueueNext);\n    },\n    clearPendingBatches: function clearPendingBatches() {\n      removePendingBatches(queueState);\n    },\n    uploadPendingBatches: function uploadPendingBatches(uploadOptions) {\n      preparePendingForUpload(queueState, uploadOptions);\n      processQueueNext(queueState);\n    }\n  };\n};\n\nexport default createUploaderQueue;","map":{"version":3,"sources":["C:/Users/lucki/Desktop/ClassCodeProjects/amtil-mc/node_modules/@rpldy/uploader/lib/esm/queue/uploaderQueue.js"],"names":["_slicedToArray","arr","i","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","TypeError","o","minLen","_arrayLikeToArray","n","Object","prototype","toString","call","slice","constructor","name","Array","from","test","len","length","arr2","Symbol","iterator","_arr","_n","_d","_e","undefined","_i","_s","next","done","push","value","err","isArray","logger","hasWindow","isFunction","createState","SENDER_EVENTS","UPLOADER_EVENTS","processQueueNext","abortMethods","detachRecycledFromPreviousBatch","getBatchFromState","preparePendingForUpload","removePendingBatches","createUploaderQueue","options","trigger","cancellable","sender","uploaderId","_createState","itemQueue","currentBatch","batches","items","activeIds","aborts","state","update","getState","updateState","updater","add","item","id","recycled","Error","concat","queueState","handleItemProgress","completed","loaded","stateItem","ITEM_PROGRESS","on","BATCH_PROGRESS","batch","_state$batches$batch$","batchItems","_batchItems$reduce","reduce","res","_batchItems$reduce2","stateBatch","getOptions","getCurrentActiveCount","runCancellable","_len","arguments","args","_key","apply","isDebugOn","window","uploadBatch","batchOptions","addBatch","finishedCounter","forEach","abortItem","abortBatch","abortAll","clearPendingBatches","uploadPendingBatches","uploadOptions"],"mappings":"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","sourcesContent":["function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport { logger, hasWindow, isFunction } from \"@rpldy/shared\";\nimport createState from \"@rpldy/simple-state\";\nimport { SENDER_EVENTS, UPLOADER_EVENTS } from \"../consts\";\nimport processQueueNext from \"./processQueueNext\";\nimport * as abortMethods from \"./abort\";\nimport { detachRecycledFromPreviousBatch, getBatchFromState, preparePendingForUpload, removePendingBatches } from \"./batchHelpers\";\n\nvar createUploaderQueue = function (options, trigger, cancellable, sender, uploaderId) {\n  var _createState = createState({\n    itemQueue: [],\n    currentBatch: null,\n    batches: {},\n    items: {},\n    activeIds: [],\n    aborts: {}\n  }),\n      state = _createState.state,\n      update = _createState.update;\n\n  var getState = function () {\n    return state;\n  };\n\n  var updateState = function (updater) {\n    update(updater);\n  };\n\n  var add = function (item) {\n    if (state.items[item.id] && !item.recycled) {\n      throw new Error(\"Uploader queue conflict - item \".concat(item.id, \" already exists\"));\n    }\n\n    if (item.recycled) {\n      detachRecycledFromPreviousBatch(queueState, item);\n    }\n\n    updateState(function (state) {\n      state.items[item.id] = item;\n      state.itemQueue.push(item.id);\n    });\n  };\n\n  var handleItemProgress = function (item, completed, loaded) {\n    if (state.items[item.id]) {\n      updateState(function (state) {\n        var stateItem = state.items[item.id];\n        stateItem.loaded = loaded;\n        stateItem.completed = completed;\n      }); //trigger item progress event for the outside\n\n      trigger(UPLOADER_EVENTS.ITEM_PROGRESS, getState().items[item.id]);\n    }\n  };\n\n  sender.on(SENDER_EVENTS.ITEM_PROGRESS, handleItemProgress);\n  sender.on(SENDER_EVENTS.BATCH_PROGRESS, function (batch) {\n    var _state$batches$batch$;\n\n    var batchItems = (_state$batches$batch$ = state.batches[batch.id]) === null || _state$batches$batch$ === void 0 ? void 0 : _state$batches$batch$.batch.items;\n\n    if (batchItems) {\n      var _batchItems$reduce = batchItems.reduce(function (res, item) {\n        res[0] += item.completed;\n        res[1] += item.loaded;\n        return res;\n      }, [0, 0]),\n          _batchItems$reduce2 = _slicedToArray(_batchItems$reduce, 2),\n          completed = _batchItems$reduce2[0],\n          loaded = _batchItems$reduce2[1];\n\n      updateState(function (state) {\n        var stateBatch = state.batches[batch.id].batch; //average of completed percentage for batch items\n\n        stateBatch.completed = completed / batchItems.length; //sum of loaded bytes for batch items\n\n        stateBatch.loaded = loaded;\n      });\n      trigger(UPLOADER_EVENTS.BATCH_PROGRESS, state.batches[batch.id].batch);\n    }\n  });\n  var queueState = {\n    uploaderId: uploaderId,\n    getOptions: function getOptions() {\n      return options;\n    },\n    getCurrentActiveCount: function getCurrentActiveCount() {\n      return state.activeIds.length;\n    },\n    getState: getState,\n    updateState: updateState,\n    trigger: trigger,\n    runCancellable: function runCancellable(name) {\n      if (!isFunction(cancellable)) {\n        //for flow :(\n        throw new Error(\"cancellable is of wrong type\");\n      }\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      return cancellable.apply(void 0, [name].concat(args));\n    },\n    sender: sender,\n    handleItemProgress: handleItemProgress\n  };\n\n  if (hasWindow() && logger.isDebugOn()) {\n    window[\"__rpldy_\".concat(uploaderId, \"_queue_state\")] = queueState;\n  }\n\n  return {\n    updateState: updateState,\n    getState: queueState.getState,\n    runCancellable: queueState.runCancellable,\n    uploadBatch: function uploadBatch(batch, batchOptions) {\n      if (batchOptions) {\n        updateState(function (state) {\n          state.batches[batch.id].batchOptions = batchOptions;\n        });\n      }\n\n      processQueueNext(queueState);\n    },\n    addBatch: function addBatch(batch, batchOptions) {\n      updateState(function (state) {\n        state.batches[batch.id] = {\n          batch: batch,\n          batchOptions: batchOptions,\n          finishedCounter: 0\n        };\n      });\n      batch.items.forEach(add);\n      return getBatchFromState(state, batch.id);\n    },\n    abortItem: function abortItem(id) {\n      return abortMethods.abortItem(queueState, id, processQueueNext);\n    },\n    abortBatch: function abortBatch(id) {\n      abortMethods.abortBatch(queueState, id, processQueueNext);\n    },\n    abortAll: function abortAll() {\n      abortMethods.abortAll(queueState, processQueueNext);\n    },\n    clearPendingBatches: function clearPendingBatches() {\n      removePendingBatches(queueState);\n    },\n    uploadPendingBatches: function uploadPendingBatches(uploadOptions) {\n      preparePendingForUpload(queueState, uploadOptions);\n      processQueueNext(queueState);\n    }\n  };\n};\n\nexport default createUploaderQueue;"]},"metadata":{},"sourceType":"module"}