{"ast":null,"code":"import addLife, { createLifePack } from \"@rpldy/life-events\";\nimport { BATCH_STATES, invariant, logger, triggerCancellable, devFreeze, merge, clone } from \"@rpldy/shared\";\nimport getProcessor from \"./processor\";\nimport { UPLOADER_EVENTS } from \"./consts\";\nimport { getMandatoryOptions, deepProxyUnwrap } from \"./utils\";\nvar EVENT_NAMES = Object.values(UPLOADER_EVENTS);\nvar EXT_OUTSIDE_ENHANCER_TIME = \"Uploady - uploader extensions can only be registered by enhancers\",\n    EXT_ALREADY_EXISTS = \"Uploady - uploader extension by this name [%s] already exists\";\nvar counter = 0;\nexport default (function (options) {\n  counter += 1;\n  var uploaderId = \"uploader-\".concat(counter);\n  var enhancerTime = false;\n  var extensions = {};\n  logger.debugLog(\"uploady.uploader: creating new instance (\".concat(uploaderId, \")\"), {\n    options: options,\n    counter: counter\n  });\n  var uploaderOptions = getMandatoryOptions(options);\n\n  var update = function (updateOptions) {\n    //TODO: updating concurrent and maxConcurrent means we need to update the processor - not supported yet!\n    uploaderOptions = merge({}, uploaderOptions, updateOptions); //need deep merge for destination\n\n    return uploader;\n  };\n\n  var add = function (files, addOptions) {\n    var processOptions = merge({}, uploaderOptions, addOptions);\n\n    if (processOptions.clearPendingOnAdd) {\n      clearPending();\n    }\n\n    var batch = processor.addNewBatch(files, uploader.id, processOptions);\n    var resultP;\n\n    if (batch.items.length) {\n      resultP = processor.runCancellable(UPLOADER_EVENTS.BATCH_ADD, batch, processOptions).then(function (isCancelled) {\n        if (!isCancelled) {\n          logger.debugLog(\"uploady.uploader [\".concat(uploader.id, \"]: new items added - auto upload =\\n                        \").concat(String(processOptions.autoUpload)), batch.items);\n\n          if (processOptions.autoUpload) {\n            processor.process(batch);\n          }\n        } else {\n          batch.state = BATCH_STATES.CANCELLED;\n          triggerWithUnwrap(UPLOADER_EVENTS.BATCH_CANCEL, batch);\n        }\n      });\n    } else {\n      logger.debugLog(\"uploady.uploader: no items to add. batch \".concat(batch.id, \" is empty. check fileFilter if this isn't intended\"));\n    }\n\n    return resultP || Promise.resolve();\n  };\n\n  var clearPending = function () {\n    processor.clearPendingBatches();\n  };\n  /**\n   * process batches that weren't auto-uploaded\n   */\n\n\n  var getOptions = function () {\n    return clone(uploaderOptions);\n  };\n\n  var registerExtension = function (name, methods) {\n    invariant(enhancerTime, EXT_OUTSIDE_ENHANCER_TIME);\n    invariant(!extensions[name], EXT_ALREADY_EXISTS, name);\n    logger.debugLog(\"uploady.uploader: registering extension: \".concat(name.toString()), methods);\n    extensions[name] = methods;\n  };\n\n  var _addLife = addLife({\n    id: uploaderId,\n    update: update,\n    add: add,\n    upload: function upload(uploadOptions) {\n      processor.processPendingBatches(uploadOptions);\n    },\n    abort: function abort(id) {\n      processor.abort(id);\n    },\n    abortBatch: function abortBatch(id) {\n      processor.abortBatch(id);\n    },\n    getOptions: getOptions,\n    clearPending: clearPending,\n    registerExtension: registerExtension,\n    getExtension: function getExtension(name) {\n      return extensions[name];\n    }\n  }, EVENT_NAMES, {\n    canAddEvents: false,\n    canRemoveEvents: false\n  }),\n      trigger = _addLife.trigger,\n      uploader = _addLife.target;\n  /**\n   * ensures that data being exposed to client-land isnt a proxy, only pojos\n   */\n\n\n  var triggerWithUnwrap = function (name) {\n    for (var _len = arguments.length, data = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      data[_key - 1] = arguments[_key];\n    } //delays unwrap to the very last time on trigger. Will only unwrap if there are listeners\n\n\n    var lp = createLifePack(function () {\n      return data.map(deepProxyUnwrap);\n    });\n    return trigger(name, lp);\n  };\n\n  var cancellable = triggerCancellable(triggerWithUnwrap);\n\n  if (uploaderOptions.enhancer) {\n    enhancerTime = true;\n    var enhanced = uploaderOptions.enhancer(uploader, triggerWithUnwrap);\n    enhancerTime = false; //graceful handling for enhancer forgetting to return uploader\n\n    uploader = enhanced || uploader;\n  }\n\n  var processor = getProcessor(triggerWithUnwrap, cancellable, uploaderOptions, uploader.id);\n  return devFreeze(uploader);\n});","map":{"version":3,"sources":["C:/Users/lucki/Desktop/ClassCodeProjects/amtil-mc/node_modules/@rpldy/uploader/lib/esm/uploader.js"],"names":["addLife","createLifePack","BATCH_STATES","invariant","logger","triggerCancellable","devFreeze","merge","clone","getProcessor","UPLOADER_EVENTS","getMandatoryOptions","deepProxyUnwrap","EVENT_NAMES","Object","values","EXT_OUTSIDE_ENHANCER_TIME","EXT_ALREADY_EXISTS","counter","options","uploaderId","concat","enhancerTime","extensions","debugLog","uploaderOptions","update","updateOptions","uploader","add","files","addOptions","processOptions","clearPendingOnAdd","clearPending","batch","processor","addNewBatch","id","resultP","items","length","runCancellable","BATCH_ADD","then","isCancelled","String","autoUpload","process","state","CANCELLED","triggerWithUnwrap","BATCH_CANCEL","Promise","resolve","clearPendingBatches","getOptions","registerExtension","name","methods","toString","_addLife","upload","uploadOptions","processPendingBatches","abort","abortBatch","getExtension","canAddEvents","canRemoveEvents","trigger","target","_len","arguments","data","Array","_key","lp","map","cancellable","enhancer","enhanced"],"mappings":"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","sourcesContent":["import addLife, { createLifePack } from \"@rpldy/life-events\";\nimport { BATCH_STATES, invariant, logger, triggerCancellable, devFreeze, merge, clone } from \"@rpldy/shared\";\nimport getProcessor from \"./processor\";\nimport { UPLOADER_EVENTS } from \"./consts\";\nimport { getMandatoryOptions, deepProxyUnwrap } from \"./utils\";\nvar EVENT_NAMES = Object.values(UPLOADER_EVENTS);\nvar EXT_OUTSIDE_ENHANCER_TIME = \"Uploady - uploader extensions can only be registered by enhancers\",\n    EXT_ALREADY_EXISTS = \"Uploady - uploader extension by this name [%s] already exists\";\nvar counter = 0;\nexport default (function (options) {\n  counter += 1;\n  var uploaderId = \"uploader-\".concat(counter);\n  var enhancerTime = false;\n  var extensions = {};\n  logger.debugLog(\"uploady.uploader: creating new instance (\".concat(uploaderId, \")\"), {\n    options: options,\n    counter: counter\n  });\n  var uploaderOptions = getMandatoryOptions(options);\n\n  var update = function (updateOptions) {\n    //TODO: updating concurrent and maxConcurrent means we need to update the processor - not supported yet!\n    uploaderOptions = merge({}, uploaderOptions, updateOptions); //need deep merge for destination\n\n    return uploader;\n  };\n\n  var add = function (files, addOptions) {\n    var processOptions = merge({}, uploaderOptions, addOptions);\n\n    if (processOptions.clearPendingOnAdd) {\n      clearPending();\n    }\n\n    var batch = processor.addNewBatch(files, uploader.id, processOptions);\n    var resultP;\n\n    if (batch.items.length) {\n      resultP = processor.runCancellable(UPLOADER_EVENTS.BATCH_ADD, batch, processOptions).then(function (isCancelled) {\n        if (!isCancelled) {\n          logger.debugLog(\"uploady.uploader [\".concat(uploader.id, \"]: new items added - auto upload =\\n                        \").concat(String(processOptions.autoUpload)), batch.items);\n\n          if (processOptions.autoUpload) {\n            processor.process(batch);\n          }\n        } else {\n          batch.state = BATCH_STATES.CANCELLED;\n          triggerWithUnwrap(UPLOADER_EVENTS.BATCH_CANCEL, batch);\n        }\n      });\n    } else {\n      logger.debugLog(\"uploady.uploader: no items to add. batch \".concat(batch.id, \" is empty. check fileFilter if this isn't intended\"));\n    }\n\n    return resultP || Promise.resolve();\n  };\n\n  var clearPending = function () {\n    processor.clearPendingBatches();\n  };\n  /**\n   * process batches that weren't auto-uploaded\n   */\n\n\n  var getOptions = function () {\n    return clone(uploaderOptions);\n  };\n\n  var registerExtension = function (name, methods) {\n    invariant(enhancerTime, EXT_OUTSIDE_ENHANCER_TIME);\n    invariant(!extensions[name], EXT_ALREADY_EXISTS, name);\n    logger.debugLog(\"uploady.uploader: registering extension: \".concat(name.toString()), methods);\n    extensions[name] = methods;\n  };\n\n  var _addLife = addLife({\n    id: uploaderId,\n    update: update,\n    add: add,\n    upload: function upload(uploadOptions) {\n      processor.processPendingBatches(uploadOptions);\n    },\n    abort: function abort(id) {\n      processor.abort(id);\n    },\n    abortBatch: function abortBatch(id) {\n      processor.abortBatch(id);\n    },\n    getOptions: getOptions,\n    clearPending: clearPending,\n    registerExtension: registerExtension,\n    getExtension: function getExtension(name) {\n      return extensions[name];\n    }\n  }, EVENT_NAMES, {\n    canAddEvents: false,\n    canRemoveEvents: false\n  }),\n      trigger = _addLife.trigger,\n      uploader = _addLife.target;\n  /**\n   * ensures that data being exposed to client-land isnt a proxy, only pojos\n   */\n\n\n  var triggerWithUnwrap = function (name) {\n    for (var _len = arguments.length, data = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      data[_key - 1] = arguments[_key];\n    }\n\n    //delays unwrap to the very last time on trigger. Will only unwrap if there are listeners\n    var lp = createLifePack(function () {\n      return data.map(deepProxyUnwrap);\n    });\n    return trigger(name, lp);\n  };\n\n  var cancellable = triggerCancellable(triggerWithUnwrap);\n\n  if (uploaderOptions.enhancer) {\n    enhancerTime = true;\n    var enhanced = uploaderOptions.enhancer(uploader, triggerWithUnwrap);\n    enhancerTime = false; //graceful handling for enhancer forgetting to return uploader\n\n    uploader = enhanced || uploader;\n  }\n\n  var processor = getProcessor(triggerWithUnwrap, cancellable, uploaderOptions, uploader.id);\n  return devFreeze(uploader);\n});"]},"metadata":{},"sourceType":"module"}