{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nimport { FILE_STATES } from \"./consts\";\nvar BISYM = Symbol[\"for\"](\"__rpldy-bi__\");\nvar iCounter = 0;\n\nvar getBatchItemWithUrl = function (batchItem, url) {\n  batchItem.url = url;\n  return batchItem;\n};\n\nvar getBatchItemWithFile = function (batchItem, file) {\n  batchItem.file = file;\n  return batchItem;\n};\n\nvar isLikeFile = function (f) {\n  return f && (f instanceof Blob || f instanceof File || _typeof(f) === \"object\" && f.name && f.type);\n};\n\nexport default (function (f, batchId) {\n  var isPending = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  iCounter += f.id && f.batchId ? 0 : 1; //keep existing id for recycled items\n\n  var id = f.id && f.batchId ? f.id : \"\".concat(batchId, \".item-\").concat(iCounter),\n      state = isPending ? FILE_STATES.PENDING : FILE_STATES.ADDED;\n  var batchItem = {\n    id: id,\n    batchId: batchId,\n    state: state,\n    uploadStatus: 0,\n    completed: 0,\n    loaded: 0,\n    aborted: false,\n    recycled: false,\n    previousBatch: null\n  };\n  Object.defineProperty(batchItem, BISYM, {\n    value: true,\n    //need writable to be able to keep prop when unwrapped from simple-state\n    writable: true\n  });\n\n  if (_typeof(f) === \"object\" && f[BISYM] === true) {\n    //recycling existing batch item\n    batchItem.recycled = true;\n    batchItem.previousBatch = f.batchId;\n    f = f.file || f.url;\n  }\n\n  if (typeof f === \"string\") {\n    batchItem = getBatchItemWithUrl(batchItem, f);\n  } else if (isLikeFile(f)) {\n    batchItem = getBatchItemWithFile(batchItem, f);\n  } else {\n    throw new Error(\"Unknown type of file added: \".concat(_typeof(f)));\n  }\n\n  return batchItem;\n});","map":{"version":3,"sources":["C:/Users/lucki/Desktop/ClassCodeProjects/amtil-mc/node_modules/@rpldy/shared/lib/esm/batchItem.js"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","FILE_STATES","BISYM","iCounter","getBatchItemWithUrl","batchItem","url","getBatchItemWithFile","file","isLikeFile","f","Blob","File","name","type","batchId","isPending","arguments","length","undefined","id","concat","state","PENDING","ADDED","uploadStatus","completed","loaded","aborted","recycled","previousBatch","Object","defineProperty","value","writable","Error"],"mappings":"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","sourcesContent":["function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function (obj) { return typeof obj; }; } else { _typeof = function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nimport { FILE_STATES } from \"./consts\";\nvar BISYM = Symbol[\"for\"](\"__rpldy-bi__\");\nvar iCounter = 0;\n\nvar getBatchItemWithUrl = function (batchItem, url) {\n  batchItem.url = url;\n  return batchItem;\n};\n\nvar getBatchItemWithFile = function (batchItem, file) {\n  batchItem.file = file;\n  return batchItem;\n};\n\nvar isLikeFile = function (f) {\n  return f && (f instanceof Blob || f instanceof File || _typeof(f) === \"object\" && f.name && f.type);\n};\n\nexport default (function (f, batchId) {\n  var isPending = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  iCounter += f.id && f.batchId ? 0 : 1; //keep existing id for recycled items\n\n  var id = f.id && f.batchId ? f.id : \"\".concat(batchId, \".item-\").concat(iCounter),\n      state = isPending ? FILE_STATES.PENDING : FILE_STATES.ADDED;\n  var batchItem = {\n    id: id,\n    batchId: batchId,\n    state: state,\n    uploadStatus: 0,\n    completed: 0,\n    loaded: 0,\n    aborted: false,\n    recycled: false,\n    previousBatch: null\n  };\n  Object.defineProperty(batchItem, BISYM, {\n    value: true,\n    //need writable to be able to keep prop when unwrapped from simple-state\n    writable: true\n  });\n\n  if (_typeof(f) === \"object\" && f[BISYM] === true) {\n    //recycling existing batch item\n    batchItem.recycled = true;\n    batchItem.previousBatch = f.batchId;\n    f = f.file || f.url;\n  }\n\n  if (typeof f === \"string\") {\n    batchItem = getBatchItemWithUrl(batchItem, f);\n  } else if (isLikeFile(f)) {\n    batchItem = getBatchItemWithFile(batchItem, f);\n  } else {\n    throw new Error(\"Unknown type of file added: \".concat(_typeof(f)));\n  }\n\n  return batchItem;\n});"]},"metadata":{},"sourceType":"module"}