{"ast":null,"code":"var getPropsExtractor = function (prop) {\n  var props = [].concat(prop);\n  return function (arr) {\n    return arr.map(function (i) {\n      return props.map(function (p) {\n        return i[p];\n      }).join();\n    });\n  };\n};\n/*\nstringifies props together - will return true for same type of value (ex: function)\neven if refs are different\n */\n\n\nvar isSamePropInArrays = function (arr1, arr2, prop) {\n  var diff = true;\n  var propsExtractor = getPropsExtractor(prop);\n\n  if (arr1 && arr2 && arr1.length === arr2.length) {\n    var props1 = propsExtractor(arr1),\n        props2 = propsExtractor(arr2);\n    diff = !!props1.find(function (p, i) {\n      return p !== props2[i];\n    });\n  }\n\n  return !diff;\n};\n\nexport default isSamePropInArrays;","map":{"version":3,"sources":["C:/Users/lucki/Desktop/ClassCodeProjects/amtil-mc/node_modules/@rpldy/shared/lib/esm/utils/isSamePropInArrays.js"],"names":["getPropsExtractor","prop","props","concat","arr","map","i","p","join","isSamePropInArrays","arr1","arr2","diff","propsExtractor","length","props1","props2","find"],"mappings":"AAAA,IAAIA,iBAAiB,GAAG,UAAUC,IAAV,EAAgB;AACtC,MAAIC,KAAK,GAAG,GAAGC,MAAH,CAAUF,IAAV,CAAZ;AACA,SAAO,UAAUG,GAAV,EAAe;AACpB,WAAOA,GAAG,CAACC,GAAJ,CAAQ,UAAUC,CAAV,EAAa;AAC1B,aAAOJ,KAAK,CAACG,GAAN,CAAU,UAAUE,CAAV,EAAa;AAC5B,eAAOD,CAAC,CAACC,CAAD,CAAR;AACD,OAFM,EAEJC,IAFI,EAAP;AAGD,KAJM,CAAP;AAKD,GAND;AAOD,CATD;AAUA;AACA;AACA;AACA;;;AAGA,IAAIC,kBAAkB,GAAG,UAAUC,IAAV,EAAgBC,IAAhB,EAAsBV,IAAtB,EAA4B;AACnD,MAAIW,IAAI,GAAG,IAAX;AACA,MAAIC,cAAc,GAAGb,iBAAiB,CAACC,IAAD,CAAtC;;AAEA,MAAIS,IAAI,IAAIC,IAAR,IAAgBD,IAAI,CAACI,MAAL,KAAgBH,IAAI,CAACG,MAAzC,EAAiD;AAC/C,QAAIC,MAAM,GAAGF,cAAc,CAACH,IAAD,CAA3B;AAAA,QACIM,MAAM,GAAGH,cAAc,CAACF,IAAD,CAD3B;AAEAC,IAAAA,IAAI,GAAG,CAAC,CAACG,MAAM,CAACE,IAAP,CAAY,UAAUV,CAAV,EAAaD,CAAb,EAAgB;AACnC,aAAOC,CAAC,KAAKS,MAAM,CAACV,CAAD,CAAnB;AACD,KAFQ,CAAT;AAGD;;AAED,SAAO,CAACM,IAAR;AACD,CAbD;;AAeA,eAAeH,kBAAf","sourcesContent":["var getPropsExtractor = function (prop) {\n  var props = [].concat(prop);\n  return function (arr) {\n    return arr.map(function (i) {\n      return props.map(function (p) {\n        return i[p];\n      }).join();\n    });\n  };\n};\n/*\nstringifies props together - will return true for same type of value (ex: function)\neven if refs are different\n */\n\n\nvar isSamePropInArrays = function (arr1, arr2, prop) {\n  var diff = true;\n  var propsExtractor = getPropsExtractor(prop);\n\n  if (arr1 && arr2 && arr1.length === arr2.length) {\n    var props1 = propsExtractor(arr1),\n        props2 = propsExtractor(arr2);\n    diff = !!props1.find(function (p, i) {\n      return p !== props2[i];\n    });\n  }\n\n  return !diff;\n};\n\nexport default isSamePropInArrays;"]},"metadata":{},"sourceType":"module"}