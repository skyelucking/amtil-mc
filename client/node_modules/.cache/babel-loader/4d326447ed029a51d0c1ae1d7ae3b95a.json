{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { UPLOADER_EVENTS } from \"@rpldy/uploader\";\nimport { generateUploaderEventHook, generateUploaderEventHookWithState } from \"./utils\";\nvar useBatchAddListener = generateUploaderEventHook(UPLOADER_EVENTS.BATCH_ADD, false);\nvar useBatchStartListener = generateUploaderEventHook(UPLOADER_EVENTS.BATCH_START);\nvar useBatchFinishListener = generateUploaderEventHook(UPLOADER_EVENTS.BATCH_FINISH);\nvar useBatchCancelledListener = generateUploaderEventHook(UPLOADER_EVENTS.BATCH_CANCEL);\nvar useBatchAbortListener = generateUploaderEventHook(UPLOADER_EVENTS.BATCH_ABORT);\nvar useBatchProgressListener = generateUploaderEventHookWithState(UPLOADER_EVENTS.BATCH_PROGRESS, function (batch) {\n  return _objectSpread({}, batch);\n});\nvar useItemStartListener = generateUploaderEventHook(UPLOADER_EVENTS.ITEM_START);\nvar useItemFinishListener = generateUploaderEventHook(UPLOADER_EVENTS.ITEM_FINISH);\nvar useItemCancelListener = generateUploaderEventHook(UPLOADER_EVENTS.ITEM_CANCEL);\nvar useItemErrorListener = generateUploaderEventHook(UPLOADER_EVENTS.ITEM_ERROR);\nvar useItemAbortListener = generateUploaderEventHook(UPLOADER_EVENTS.ITEM_ABORT);\nvar useItemFinalizeListener = generateUploaderEventHook(UPLOADER_EVENTS.ITEM_FINALIZE);\nvar useItemProgressListener = generateUploaderEventHookWithState(UPLOADER_EVENTS.ITEM_PROGRESS, function (item) {\n  return _objectSpread({}, item);\n});\nvar useRequestPreSend = generateUploaderEventHook(UPLOADER_EVENTS.REQUEST_PRE_SEND, false);\nvar useAllAbortListener = generateUploaderEventHook(UPLOADER_EVENTS.ALL_ABORT, false);\nexport { useBatchAddListener, useBatchStartListener, useBatchFinishListener, useBatchCancelledListener, useBatchAbortListener, useBatchProgressListener, useItemStartListener, useItemFinishListener, useItemProgressListener, useItemCancelListener, useItemErrorListener, useItemAbortListener, useItemFinalizeListener, useRequestPreSend, useAllAbortListener };","map":{"version":3,"sources":["C:/Users/lucki/Desktop/ClassCodeProjects/amtil-mc/node_modules/@rpldy/shared-ui/lib/esm/eventListenerHooks.js"],"names":["ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","obj","value","configurable","writable","UPLOADER_EVENTS","generateUploaderEventHook","generateUploaderEventHookWithState","useBatchAddListener","BATCH_ADD","useBatchStartListener","BATCH_START","useBatchFinishListener","BATCH_FINISH","useBatchCancelledListener","BATCH_CANCEL","useBatchAbortListener","BATCH_ABORT","useBatchProgressListener","BATCH_PROGRESS","batch","useItemStartListener","ITEM_START","useItemFinishListener","ITEM_FINISH","useItemCancelListener","ITEM_CANCEL","useItemErrorListener","ITEM_ERROR","useItemAbortListener","ITEM_ABORT","useItemFinalizeListener","ITEM_FINALIZE","useItemProgressListener","ITEM_PROGRESS","item","useRequestPreSend","REQUEST_PRE_SEND","useAllAbortListener","ALL_ABORT"],"mappings":"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","sourcesContent":["function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { UPLOADER_EVENTS } from \"@rpldy/uploader\";\nimport { generateUploaderEventHook, generateUploaderEventHookWithState } from \"./utils\";\nvar useBatchAddListener = generateUploaderEventHook(UPLOADER_EVENTS.BATCH_ADD, false);\nvar useBatchStartListener = generateUploaderEventHook(UPLOADER_EVENTS.BATCH_START);\nvar useBatchFinishListener = generateUploaderEventHook(UPLOADER_EVENTS.BATCH_FINISH);\nvar useBatchCancelledListener = generateUploaderEventHook(UPLOADER_EVENTS.BATCH_CANCEL);\nvar useBatchAbortListener = generateUploaderEventHook(UPLOADER_EVENTS.BATCH_ABORT);\nvar useBatchProgressListener = generateUploaderEventHookWithState(UPLOADER_EVENTS.BATCH_PROGRESS, function (batch) {\n  return _objectSpread({}, batch);\n});\nvar useItemStartListener = generateUploaderEventHook(UPLOADER_EVENTS.ITEM_START);\nvar useItemFinishListener = generateUploaderEventHook(UPLOADER_EVENTS.ITEM_FINISH);\nvar useItemCancelListener = generateUploaderEventHook(UPLOADER_EVENTS.ITEM_CANCEL);\nvar useItemErrorListener = generateUploaderEventHook(UPLOADER_EVENTS.ITEM_ERROR);\nvar useItemAbortListener = generateUploaderEventHook(UPLOADER_EVENTS.ITEM_ABORT);\nvar useItemFinalizeListener = generateUploaderEventHook(UPLOADER_EVENTS.ITEM_FINALIZE);\nvar useItemProgressListener = generateUploaderEventHookWithState(UPLOADER_EVENTS.ITEM_PROGRESS, function (item) {\n  return _objectSpread({}, item);\n});\nvar useRequestPreSend = generateUploaderEventHook(UPLOADER_EVENTS.REQUEST_PRE_SEND, false);\nvar useAllAbortListener = generateUploaderEventHook(UPLOADER_EVENTS.ALL_ABORT, false);\nexport { useBatchAddListener, useBatchStartListener, useBatchFinishListener, useBatchCancelledListener, useBatchAbortListener, useBatchProgressListener, useItemStartListener, useItemFinishListener, useItemProgressListener, useItemCancelListener, useItemErrorListener, useItemAbortListener, useItemFinalizeListener, useRequestPreSend, useAllAbortListener };"]},"metadata":{},"sourceType":"module"}